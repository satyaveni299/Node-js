const express = require('express')
const app = express()
const path = require('path')
const dbPath = path.join(__dirname, 'todoApplication.db')
app.use(express.json())
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
let db = null
const initilizeDBandServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server is running at https://localhost:3000/')
    })
  } catch (e) {
    console.log(`ERRO DB : ${e.message}`)
  }
}
const priorityANDstatus = requestQuery => {
  return
  {
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  }
}
const onlyPriority = requestQuery => {
  return requestQuery.priority !== undefined
}
const onlystatus = requestQuery => {
  return requestQuery.status !== undefined
}
initilizeDBandServer()
app.get('/todos/', async (request, response) => {
  const {search_q = '', priority, status} = request.query
  let data = null
  let todoQuery = ''
  switch (true) {
    case priorityANDstatus(request.query):
      todoQuery = `SELECT * FROM todo 
      WHERE 
        todo LIKE '%${search_q}%'
      AND
        priority='${priority}'
      AND 
        status='${status}';
        `
      break
    case onlyPriority(request.query):
      todoQuery = `SELECT * FROM todo 
        WHERE 
          todo LIKE '%${search_q}%'
        AND
          priority='${priority}';
        `
      break
    case onlystatus(request.query):
      todoQuery = `SELECT * FROM todo 
        WHERE 
          todo LIKE '%${search_q}%'
        AND
          status='${status}';
        `
      break
    default:
      todoQuery = `SELECT * FROM todo 
        WHERE 
          todo LIKE '%${search_q}%';`
  }
  data = await db.all(todoQuery)
  response.send(data)
})
app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const getQuery = `SELECT * FROM todo WHERE id=${todoId};`
  const data = await db.get(getQuery)
  response.send(data)
})
app.post('/todos/', async (request, response) => {
  const {id, todo, priority, status} = request.body
  const postQuery = `INSERT INTO todo(id,todo,priority,status)
  values(${id},'${todo}','${priority}','${status}');`
  await db.run(postQuery)
  response.send('Todo Successfully Added')
})
app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const delQuery = `DELETE FROM todo WHERE id=${todoId};`
  await db.run(delQuery)
  response.send('Todo Deleted')
})
app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const reqBody = request.body
  if (reqBody.status !== undefined) {
    const {status} = reqBody
    const updateQuery = `UPDATE todo SET status='${status}'
    WHERE id=${todoId};`
    await db.run(updateQuery)
    response.send('Status Updated')
  } else if (reqBody.priority !== undefined) {
    const {priority} = reqBody
    const updateQuery = `UPDATE todo SET priority='${priority}'
    WHERE id=${todoId};`
    await db.run(updateQuery)
    response.send('Priority Updated')
  } else if (reqBody.todo !== undefined) {
    const {todo} = reqBody
    const updateQuery = `UPDATE todo SET todo='${todo}'
    WHERE id=${todoId};`
    await db.run(updateQuery)
    response.send('Todo Updated')
  }
})
module.exports = app
